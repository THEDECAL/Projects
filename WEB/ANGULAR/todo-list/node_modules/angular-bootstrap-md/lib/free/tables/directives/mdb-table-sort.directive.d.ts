import { AfterViewInit, ElementRef, EventEmitter, OnInit, Renderer2 } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
declare enum SortDirection {
    ASC = "ascending",
    DESC = "descending",
    CONST = "constant"
}
export interface SortedData {
    data: any[];
    sortOrder: string;
    sortBy: string;
}
export declare class MdbTableSortDirective implements OnInit, AfterViewInit {
    private el;
    private renderer;
    data: any[];
    sortedInto: boolean;
    order: SortDirection.ASC | SortDirection.DESC | SortDirection.CONST;
    dataSource: Array<any>;
    sortBy: string;
    sortIcon: boolean;
    resetSortDirection: boolean;
    sortEnd: EventEmitter<any[]>;
    sorted: EventEmitter<SortedData>;
    constructor(el: ElementRef, renderer: Renderer2);
    onclick(): void;
    trimWhiteSigns(headElement: any): string;
    moveArrayItem(arr: any, oldIndex: number, newIndex: number): any;
    sortDataBy(key: string | any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    createIcon(): void;
    removeSort(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MdbTableSortDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MdbTableSortDirective, "[mdbTableSort]", never, { "dataSource": "mdbTableSort"; "sortIcon": "sortIcon"; "resetSortDirection": "resetSortDirection"; "sortBy": "sortBy"; }, { "sortEnd": "sortEnd"; "sorted": "sorted"; }, never>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLXRhYmxlLXNvcnQuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbIm1kYi10YWJsZS1zb3J0LmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuZGVjbGFyZSBlbnVtIFNvcnREaXJlY3Rpb24ge1xuICAgIEFTQyA9IFwiYXNjZW5kaW5nXCIsXG4gICAgREVTQyA9IFwiZGVzY2VuZGluZ1wiLFxuICAgIENPTlNUID0gXCJjb25zdGFudFwiXG59XG5leHBvcnQgaW50ZXJmYWNlIFNvcnRlZERhdGEge1xuICAgIGRhdGE6IGFueVtdO1xuICAgIHNvcnRPcmRlcjogc3RyaW5nO1xuICAgIHNvcnRCeTogc3RyaW5nO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWRiVGFibGVTb3J0RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgICBwcml2YXRlIGVsO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgZGF0YTogYW55W107XG4gICAgc29ydGVkSW50bzogYm9vbGVhbjtcbiAgICBvcmRlcjogU29ydERpcmVjdGlvbi5BU0MgfCBTb3J0RGlyZWN0aW9uLkRFU0MgfCBTb3J0RGlyZWN0aW9uLkNPTlNUO1xuICAgIGRhdGFTb3VyY2U6IEFycmF5PGFueT47XG4gICAgc29ydEJ5OiBzdHJpbmc7XG4gICAgc29ydEljb246IGJvb2xlYW47XG4gICAgcmVzZXRTb3J0RGlyZWN0aW9uOiBib29sZWFuO1xuICAgIHNvcnRFbmQ6IEV2ZW50RW1pdHRlcjxhbnlbXT47XG4gICAgc29ydGVkOiBFdmVudEVtaXR0ZXI8U29ydGVkRGF0YT47XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIG9uY2xpY2soKTogdm9pZDtcbiAgICB0cmltV2hpdGVTaWducyhoZWFkRWxlbWVudDogYW55KTogc3RyaW5nO1xuICAgIG1vdmVBcnJheUl0ZW0oYXJyOiBhbnksIG9sZEluZGV4OiBudW1iZXIsIG5ld0luZGV4OiBudW1iZXIpOiBhbnk7XG4gICAgc29ydERhdGFCeShrZXk6IHN0cmluZyB8IGFueSk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBjcmVhdGVJY29uKCk6IHZvaWQ7XG4gICAgcmVtb3ZlU29ydCgpOiB2b2lkO1xufVxuZXhwb3J0IHt9O1xuIl19