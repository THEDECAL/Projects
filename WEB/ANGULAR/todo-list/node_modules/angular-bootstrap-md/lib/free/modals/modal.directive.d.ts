import { AfterViewInit, ComponentRef, ElementRef, EventEmitter, OnDestroy, OnChanges, Renderer2, ViewContainerRef } from '@angular/core';
import { Utils } from '../utils/utils.class';
import { ModalBackdropComponent } from './modalBackdrop.component';
import { ModalOptions } from './modal.options';
import { ComponentLoaderFactory } from '../utils/component-loader/component-loader.factory';
import { ConfigurableFocusTrapFactory } from '@angular/cdk/a11y';
/** Mark any code with directive to show it's content in modal */
import * as ɵngcc0 from '@angular/core';
export declare class ModalDirective implements AfterViewInit, OnDestroy, OnChanges {
    protected _element: ElementRef;
    private _focusTrapFactory;
    protected _renderer: Renderer2;
    /** allows to set modal configuration via element property */
    set config(conf: ModalOptions | any);
    get config(): ModalOptions | any;
    /** This event fires immediately when the `show` instance method is called. */
    onShow: EventEmitter<ModalDirective>;
    open: EventEmitter<ModalDirective>;
    /** This event is fired when the modal has been made visible to the user (will wait for CSS transitions to complete) */
    onShown: EventEmitter<ModalDirective>;
    opened: EventEmitter<ModalDirective>;
    /** This event is fired immediately when the hide instance method has been called. */
    onHide: EventEmitter<ModalDirective>;
    close: EventEmitter<ModalDirective>;
    /** This event is fired when the modal has finished being hidden from the user (will wait for CSS transitions to complete). */
    onHidden: EventEmitter<ModalDirective>;
    closed: EventEmitter<ModalDirective>;
    isAnimated: boolean;
    /** This field contains last dismiss reason.
     Possible values: `backdrop-click`, `esc` and `null` (if modal was closed by direct call of `.hide()`). */
    dismissReason: string | any;
    get isShown(): boolean;
    protected _config: ModalOptions | any;
    protected _isShown: boolean;
    protected isBodyOverflowing: boolean;
    protected originalBodyPadding: number;
    protected scrollbarWidth: number;
    protected timerHideModal: any;
    protected timerRmBackDrop: any;
    protected backdrop: ComponentRef<ModalBackdropComponent> | undefined;
    private _backdrop;
    private _focusTrap;
    _dialog: any;
    isNested: boolean;
    utils: Utils;
    onClick(event: any): void;
    onEsc(): void;
    constructor(_element: ElementRef, _focusTrapFactory: ConfigurableFocusTrapFactory, _viewContainerRef: ViewContainerRef, _renderer: Renderer2, clf: ComponentLoaderFactory);
    ngOnDestroy(): any;
    ngAfterViewInit(): any;
    ngOnChanges(): any;
    /** Allows to manually toggle modal visibility */
    toggle(): void;
    /** Allows to manually open modal */
    show(): void;
    /** Allows to manually close modal */
    hide(event?: Event): void;
    /** Private methods @internal */
    protected getConfig(config?: ModalOptions): ModalOptions;
    /**
     *  Show dialog
     *  @internal
     */
    protected showElement(): void;
    private _createFocusTrap;
    /** @internal */
    protected hideModal(): void;
    /** @internal */
    protected showBackdrop(callback?: Function): void;
    /** @internal */
    protected removeBackdrop(): void;
    protected focusOtherModal(): void;
    /** @internal */
    protected resetAdjustments(): void;
    /** Scroll bar tricks */
    /** @internal */
    protected checkScrollbar(): void;
    protected setScrollbar(): void;
    protected getScrollbarWidth(): number;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ModalDirective, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ModalDirective, "[mdbModal]", ["mdb-modal", "mdbModal"], { "config": "config"; }, { "onShow": "onShow"; "open": "open"; "onShown": "onShown"; "opened": "opened"; "onHide": "onHide"; "close": "close"; "onHidden": "onHidden"; "closed": "closed"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbIm1vZGFsLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50UmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBSZW5kZXJlcjIsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMuY2xhc3MnO1xuaW1wb3J0IHsgTW9kYWxCYWNrZHJvcENvbXBvbmVudCB9IGZyb20gJy4vbW9kYWxCYWNrZHJvcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTW9kYWxPcHRpb25zIH0gZnJvbSAnLi9tb2RhbC5vcHRpb25zJztcbmltcG9ydCB7IENvbXBvbmVudExvYWRlckZhY3RvcnkgfSBmcm9tICcuLi91dGlscy9jb21wb25lbnQtbG9hZGVyL2NvbXBvbmVudC1sb2FkZXIuZmFjdG9yeSc7XG5pbXBvcnQgeyBDb25maWd1cmFibGVGb2N1c1RyYXBGYWN0b3J5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuLyoqIE1hcmsgYW55IGNvZGUgd2l0aCBkaXJlY3RpdmUgdG8gc2hvdyBpdCdzIGNvbnRlbnQgaW4gbW9kYWwgKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1vZGFsRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xuICAgIHByb3RlY3RlZCBfZWxlbWVudDogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIF9mb2N1c1RyYXBGYWN0b3J5O1xuICAgIHByb3RlY3RlZCBfcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICAvKiogYWxsb3dzIHRvIHNldCBtb2RhbCBjb25maWd1cmF0aW9uIHZpYSBlbGVtZW50IHByb3BlcnR5ICovXG4gICAgc2V0IGNvbmZpZyhjb25mOiBNb2RhbE9wdGlvbnMgfCBhbnkpO1xuICAgIGdldCBjb25maWcoKTogTW9kYWxPcHRpb25zIHwgYW55O1xuICAgIC8qKiBUaGlzIGV2ZW50IGZpcmVzIGltbWVkaWF0ZWx5IHdoZW4gdGhlIGBzaG93YCBpbnN0YW5jZSBtZXRob2QgaXMgY2FsbGVkLiAqL1xuICAgIG9uU2hvdzogRXZlbnRFbWl0dGVyPE1vZGFsRGlyZWN0aXZlPjtcbiAgICBvcGVuOiBFdmVudEVtaXR0ZXI8TW9kYWxEaXJlY3RpdmU+O1xuICAgIC8qKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIG1vZGFsIGhhcyBiZWVuIG1hZGUgdmlzaWJsZSB0byB0aGUgdXNlciAod2lsbCB3YWl0IGZvciBDU1MgdHJhbnNpdGlvbnMgdG8gY29tcGxldGUpICovXG4gICAgb25TaG93bjogRXZlbnRFbWl0dGVyPE1vZGFsRGlyZWN0aXZlPjtcbiAgICBvcGVuZWQ6IEV2ZW50RW1pdHRlcjxNb2RhbERpcmVjdGl2ZT47XG4gICAgLyoqIFRoaXMgZXZlbnQgaXMgZmlyZWQgaW1tZWRpYXRlbHkgd2hlbiB0aGUgaGlkZSBpbnN0YW5jZSBtZXRob2QgaGFzIGJlZW4gY2FsbGVkLiAqL1xuICAgIG9uSGlkZTogRXZlbnRFbWl0dGVyPE1vZGFsRGlyZWN0aXZlPjtcbiAgICBjbG9zZTogRXZlbnRFbWl0dGVyPE1vZGFsRGlyZWN0aXZlPjtcbiAgICAvKiogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIHRoZSBtb2RhbCBoYXMgZmluaXNoZWQgYmVpbmcgaGlkZGVuIGZyb20gdGhlIHVzZXIgKHdpbGwgd2FpdCBmb3IgQ1NTIHRyYW5zaXRpb25zIHRvIGNvbXBsZXRlKS4gKi9cbiAgICBvbkhpZGRlbjogRXZlbnRFbWl0dGVyPE1vZGFsRGlyZWN0aXZlPjtcbiAgICBjbG9zZWQ6IEV2ZW50RW1pdHRlcjxNb2RhbERpcmVjdGl2ZT47XG4gICAgaXNBbmltYXRlZDogYm9vbGVhbjtcbiAgICAvKiogVGhpcyBmaWVsZCBjb250YWlucyBsYXN0IGRpc21pc3MgcmVhc29uLlxuICAgICBQb3NzaWJsZSB2YWx1ZXM6IGBiYWNrZHJvcC1jbGlja2AsIGBlc2NgIGFuZCBgbnVsbGAgKGlmIG1vZGFsIHdhcyBjbG9zZWQgYnkgZGlyZWN0IGNhbGwgb2YgYC5oaWRlKClgKS4gKi9cbiAgICBkaXNtaXNzUmVhc29uOiBzdHJpbmcgfCBhbnk7XG4gICAgZ2V0IGlzU2hvd24oKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgX2NvbmZpZzogTW9kYWxPcHRpb25zIHwgYW55O1xuICAgIHByb3RlY3RlZCBfaXNTaG93bjogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgaXNCb2R5T3ZlcmZsb3dpbmc6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIG9yaWdpbmFsQm9keVBhZGRpbmc6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgc2Nyb2xsYmFyV2lkdGg6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgdGltZXJIaWRlTW9kYWw6IGFueTtcbiAgICBwcm90ZWN0ZWQgdGltZXJSbUJhY2tEcm9wOiBhbnk7XG4gICAgcHJvdGVjdGVkIGJhY2tkcm9wOiBDb21wb25lbnRSZWY8TW9kYWxCYWNrZHJvcENvbXBvbmVudD4gfCB1bmRlZmluZWQ7XG4gICAgcHJpdmF0ZSBfYmFja2Ryb3A7XG4gICAgcHJpdmF0ZSBfZm9jdXNUcmFwO1xuICAgIF9kaWFsb2c6IGFueTtcbiAgICBpc05lc3RlZDogYm9vbGVhbjtcbiAgICB1dGlsczogVXRpbHM7XG4gICAgb25DbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBvbkVzYygpOiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKF9lbGVtZW50OiBFbGVtZW50UmVmLCBfZm9jdXNUcmFwRmFjdG9yeTogQ29uZmlndXJhYmxlRm9jdXNUcmFwRmFjdG9yeSwgX3ZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIF9yZW5kZXJlcjogUmVuZGVyZXIyLCBjbGY6IENvbXBvbmVudExvYWRlckZhY3RvcnkpO1xuICAgIG5nT25EZXN0cm95KCk6IGFueTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogYW55O1xuICAgIG5nT25DaGFuZ2VzKCk6IGFueTtcbiAgICAvKiogQWxsb3dzIHRvIG1hbnVhbGx5IHRvZ2dsZSBtb2RhbCB2aXNpYmlsaXR5ICovXG4gICAgdG9nZ2xlKCk6IHZvaWQ7XG4gICAgLyoqIEFsbG93cyB0byBtYW51YWxseSBvcGVuIG1vZGFsICovXG4gICAgc2hvdygpOiB2b2lkO1xuICAgIC8qKiBBbGxvd3MgdG8gbWFudWFsbHkgY2xvc2UgbW9kYWwgKi9cbiAgICBoaWRlKGV2ZW50PzogRXZlbnQpOiB2b2lkO1xuICAgIC8qKiBQcml2YXRlIG1ldGhvZHMgQGludGVybmFsICovXG4gICAgcHJvdGVjdGVkIGdldENvbmZpZyhjb25maWc/OiBNb2RhbE9wdGlvbnMpOiBNb2RhbE9wdGlvbnM7XG4gICAgLyoqXG4gICAgICogIFNob3cgZGlhbG9nXG4gICAgICogIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBzaG93RWxlbWVudCgpOiB2b2lkO1xuICAgIHByaXZhdGUgX2NyZWF0ZUZvY3VzVHJhcDtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJvdGVjdGVkIGhpZGVNb2RhbCgpOiB2b2lkO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcm90ZWN0ZWQgc2hvd0JhY2tkcm9wKGNhbGxiYWNrPzogRnVuY3Rpb24pOiB2b2lkO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcm90ZWN0ZWQgcmVtb3ZlQmFja2Ryb3AoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZm9jdXNPdGhlck1vZGFsKCk6IHZvaWQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByb3RlY3RlZCByZXNldEFkanVzdG1lbnRzKCk6IHZvaWQ7XG4gICAgLyoqIFNjcm9sbCBiYXIgdHJpY2tzICovXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByb3RlY3RlZCBjaGVja1Njcm9sbGJhcigpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBzZXRTY3JvbGxiYXIoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZ2V0U2Nyb2xsYmFyV2lkdGgoKTogbnVtYmVyO1xufVxuIl19