import { ComponentRef, TemplateRef, EventEmitter, RendererFactory2 } from '@angular/core';
import { ComponentLoaderFactory } from '../utils/component-loader/component-loader.factory';
import { ModalBackdropComponent } from './modalBackdrop.component';
import { MDBModalRef, ModalOptions } from './modal.options';
import * as ɵngcc0 from '@angular/core';
export declare class MDBModalService {
    private clf;
    config: ModalOptions;
    private renderer;
    private vcr;
    private el;
    open: EventEmitter<any>;
    opened: EventEmitter<any>;
    close: EventEmitter<any>;
    closed: EventEmitter<any>;
    protected isBodyOverflowing: boolean;
    protected originalBodyPadding: number;
    protected scrollbarWidth: number;
    protected backdropRef: ComponentRef<ModalBackdropComponent> | any;
    private _backdropLoader;
    private modalsCount;
    private lastDismissReason;
    private loaders;
    constructor(rendererFactory: RendererFactory2, clf: ComponentLoaderFactory);
    /** Shows a modal */
    show(content: string | TemplateRef<any> | any, config?: any): MDBModalRef;
    hide(level: number): void;
    _showBackdrop(): void;
    _hideBackdrop(): void;
    _showModal(content: any): MDBModalRef;
    _hideModal(level: number): void;
    getModalsCount(): number;
    setDismissReason(reason: string): void;
    protected removeBackdrop(): void;
    /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE*/
    /** Scroll bar tricks */
    /** @internal */
    checkScrollbar(): void;
    setScrollbar(): void;
    private resetScrollbar;
    private getScrollbarWidth;
    private _createLoaders;
    private removeLoaders;
    private copyEvent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MDBModalService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MDBModalService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJtb2RhbC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFJlZiwgVGVtcGxhdGVSZWYsIEV2ZW50RW1pdHRlciwgUmVuZGVyZXJGYWN0b3J5MiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50TG9hZGVyRmFjdG9yeSB9IGZyb20gJy4uL3V0aWxzL2NvbXBvbmVudC1sb2FkZXIvY29tcG9uZW50LWxvYWRlci5mYWN0b3J5JztcbmltcG9ydCB7IE1vZGFsQmFja2Ryb3BDb21wb25lbnQgfSBmcm9tICcuL21vZGFsQmFja2Ryb3AuY29tcG9uZW50JztcbmltcG9ydCB7IE1EQk1vZGFsUmVmLCBNb2RhbE9wdGlvbnMgfSBmcm9tICcuL21vZGFsLm9wdGlvbnMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTURCTW9kYWxTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGNsZjtcbiAgICBjb25maWc6IE1vZGFsT3B0aW9ucztcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgdmNyO1xuICAgIHByaXZhdGUgZWw7XG4gICAgb3BlbjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb3BlbmVkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjbG9zZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY2xvc2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwcm90ZWN0ZWQgaXNCb2R5T3ZlcmZsb3dpbmc6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIG9yaWdpbmFsQm9keVBhZGRpbmc6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgc2Nyb2xsYmFyV2lkdGg6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgYmFja2Ryb3BSZWY6IENvbXBvbmVudFJlZjxNb2RhbEJhY2tkcm9wQ29tcG9uZW50PiB8IGFueTtcbiAgICBwcml2YXRlIF9iYWNrZHJvcExvYWRlcjtcbiAgICBwcml2YXRlIG1vZGFsc0NvdW50O1xuICAgIHByaXZhdGUgbGFzdERpc21pc3NSZWFzb247XG4gICAgcHJpdmF0ZSBsb2FkZXJzO1xuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyRmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5MiwgY2xmOiBDb21wb25lbnRMb2FkZXJGYWN0b3J5KTtcbiAgICAvKiogU2hvd3MgYSBtb2RhbCAqL1xuICAgIHNob3coY29udGVudDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PiB8IGFueSwgY29uZmlnPzogYW55KTogTURCTW9kYWxSZWY7XG4gICAgaGlkZShsZXZlbDogbnVtYmVyKTogdm9pZDtcbiAgICBfc2hvd0JhY2tkcm9wKCk6IHZvaWQ7XG4gICAgX2hpZGVCYWNrZHJvcCgpOiB2b2lkO1xuICAgIF9zaG93TW9kYWwoY29udGVudDogYW55KTogTURCTW9kYWxSZWY7XG4gICAgX2hpZGVNb2RhbChsZXZlbDogbnVtYmVyKTogdm9pZDtcbiAgICBnZXRNb2RhbHNDb3VudCgpOiBudW1iZXI7XG4gICAgc2V0RGlzbWlzc1JlYXNvbihyZWFzb246IHN0cmluZyk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHJlbW92ZUJhY2tkcm9wKCk6IHZvaWQ7XG4gICAgLyoqIEFGVEVSIFBSIE1FUkdFIE1PREFMLkNPTVBPTkVOVCBXSUxMIEJFIFVTSU5HIFRISVMgQ09ERSovXG4gICAgLyoqIFNjcm9sbCBiYXIgdHJpY2tzICovXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNoZWNrU2Nyb2xsYmFyKCk6IHZvaWQ7XG4gICAgc2V0U2Nyb2xsYmFyKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSByZXNldFNjcm9sbGJhcjtcbiAgICBwcml2YXRlIGdldFNjcm9sbGJhcldpZHRoO1xuICAgIHByaXZhdGUgX2NyZWF0ZUxvYWRlcnM7XG4gICAgcHJpdmF0ZSByZW1vdmVMb2FkZXJzO1xuICAgIHByaXZhdGUgY29weUV2ZW50O1xufVxuIl19